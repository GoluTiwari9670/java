public class Solution {
    public int maximalSquare(char[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0)
            return 0;

        int m = matrix.length;
        int n = matrix[0].length;
        int maxSide = 0;

        // DP array to store the size of the largest square ending at (i, j)
        int[][] dp = new int[m][n];

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                // Only process if the cell is '1'
                if (matrix[i][j] == '1') {
                    // If it's the first row or column, square size is 1
                    if (i == 0 || j == 0) {
                        dp[i][j] = 1;
                    } else {
                        // Otherwise, take the minimum of the three adjacent squares + 1
                        dp[i][j] = Math.min(
                            Math.min(dp[i - 1][j], dp[i][j - 1]),
                            dp[i - 1][j - 1]
                        ) + 1;
                    }
                    // Update maximum side length found so far
                    maxSide = Math.max(maxSide, dp[i][j]);
                }
            }
        }

        // Area is side^2
        return maxSide * maxSide;
    }
}
