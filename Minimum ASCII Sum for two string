public class Solution {
    public int minimumDeleteSum(String s1, String s2) {
        int m = s1.length();
        int n = s2.length();
        
        // dp[i][j] will store the minimum ASCII sum of deleted characters to make s1[0..i] and s2[0..j] equal
        int[][] dp = new int[m + 1][n + 1];
        
        // Initialize the base cases
        for (int i = 1; i <= m; i++) {
            dp[i][0] = dp[i-1][0] + s1.charAt(i-1);
        }
        for (int j = 1; j <= n; j++) {
            dp[0][j] = dp[0][j-1] + s2.charAt(j-1);
        }
        
        // Fill the DP table
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (s1.charAt(i-1) == s2.charAt(j-1)) {
                    dp[i][j] = dp[i-1][j-1];  // No need to delete if characters match
                } else {
                    dp[i][j] = Math.min(dp[i-1][j] + s1.charAt(i-1),  // Delete from s1
                                        dp[i][j-1] + s2.charAt(j-1));  // Delete from s2
                }
            }
        }
        
        // The result is the value at dp[m][n]
        return dp[m][n];
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        
        // Test case 1
        String test1_s1 = "sea";
        String test1_s2 = "eat";
        System.out.println(solution.minimumDeleteSum(test1_s1, test1_s2));  // Output: 231

        // Test case 2
        String test2_s1 = "delete";
        String test2_s2 = "leet";
        System.out.println(solution.minimumDeleteSum(test2_s1, test2_s2));  // Output: 403
    }
}
